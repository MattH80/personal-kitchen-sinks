
ArmTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f68  08002f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08002f7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002f7c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b40b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a9e  00000000  00000000  0002b447  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002cee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021333  00000000  00000000  0002e580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097f3  00000000  00000000  0004f8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cad29  00000000  00000000  000590a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123dcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003054  00000000  00000000  00123e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f10 	.word	0x08002f10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f10 	.word	0x08002f10

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a3f      	ldr	r2, [pc, #252]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <MX_GPIO_Init+0x11c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <MX_GPIO_Init+0x11c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a38      	ldr	r2, [pc, #224]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b36      	ldr	r3, [pc, #216]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a31      	ldr	r2, [pc, #196]	; (8000620 <MX_GPIO_Init+0x11c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a2a      	ldr	r2, [pc, #168]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <MX_GPIO_Init+0x11c>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <MX_GPIO_Init+0x11c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <MX_GPIO_Init+0x120>)
 80005ac:	f000 ffec 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_WRST_Pin|CS_SHLDR_3_Pin|CS_SHLDR_4_Pin|LED_R_Pin
 80005b0:	2200      	movs	r2, #0
 80005b2:	2177      	movs	r1, #119	; 0x77
 80005b4:	481c      	ldr	r0, [pc, #112]	; (8000628 <MX_GPIO_Init+0x124>)
 80005b6:	f000 ffe7 	bl	8001588 <HAL_GPIO_WritePin>
                          |LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <MX_GPIO_Init+0x128>)
 80005c0:	f000 ffe2 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4812      	ldr	r0, [pc, #72]	; (8000624 <MX_GPIO_Init+0x120>)
 80005dc:	f000 fe42 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CS_WRST_Pin|CS_SHLDR_3_Pin|CS_SHLDR_4_Pin|LED_R_Pin
 80005e0:	2377      	movs	r3, #119	; 0x77
 80005e2:	617b      	str	r3, [r7, #20]
                          |LEDG_Pin|LEDB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_GPIO_Init+0x124>)
 80005f8:	f000 fe34 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005fc:	2340      	movs	r3, #64	; 0x40
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_GPIO_Init+0x128>)
 8000614:	f000 fe26 	bl	8001264 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40021000 	.word	0x40021000
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40020400 	.word	0x40020400

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fc9b 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f8a3 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f7ff ff61 	bl	8000504 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000642:	f000 fb99 	bl	8000d78 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000646:	f000 f901 	bl	800084c <MX_SPI1_Init>
  MX_SPI2_Init();
 800064a:	f000 f935 	bl	80008b8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800064e:	f000 f969 	bl	8000924 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000652:	f000 f99d 	bl	8000990 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000656:	2104      	movs	r1, #4
 8000658:	4842      	ldr	r0, [pc, #264]	; (8000764 <main+0x134>)
 800065a:	f001 fee5 	bl	8002428 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t iterator = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  const float MAX_PWM_MS = 2.0f;
 8000664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  const float MIN_PWM_MS = 1.0f;
 800066a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int MAX_ITERATOR = 8.0;
 8000670:	2308      	movs	r3, #8
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  int data[10] = {0,1,2,3,4,5,6,7,8,9};
 8000674:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <main+0x138>)
 8000676:	463c      	mov	r4, r7
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000686:	e884 0003 	stmia.w	r4, {r0, r1}

  while (1)
  {
	  if(iterator == MAX_ITERATOR)
 800068a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800068e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000690:	429a      	cmp	r2, r3
 8000692:	d102      	bne.n	800069a <main+0x6a>
	  {
		  iterator = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  /**RGB LED Tests**/
	  //HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, isBitSet(iterator, 0));
	  //HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, isBitSet(iterator, 1));
	  //HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, isBitSet(iterator, 2));
	  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2110      	movs	r1, #16
 800069e:	4833      	ldr	r0, [pc, #204]	; (800076c <main+0x13c>)
 80006a0:	f000 ff72 	bl	8001588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2120      	movs	r1, #32
 80006a8:	4830      	ldr	r0, [pc, #192]	; (800076c <main+0x13c>)
 80006aa:	f000 ff6d 	bl	8001588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <main+0x13c>)
 80006b4:	f000 ff68 	bl	8001588 <HAL_GPIO_WritePin>


	  /**Servo Tests**/
	  htim3.Instance->CCR2 = iterator*40000/MAX_ITERATOR;
 80006b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006bc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80006c0:	fb02 f203 	mul.w	r2, r2, r3
 80006c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c6:	fb92 f2f3 	sdiv	r2, r2, r3
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0x134>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38


	  /**Chip Select Tests**/
	  HAL_GPIO_WritePin(CS_WRST_GPIO_Port, CS_WRST_Pin, isBitSet(iterator, 0));
 80006d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	2101      	movs	r1, #1
 80006de:	4823      	ldr	r0, [pc, #140]	; (800076c <main+0x13c>)
 80006e0:	f000 ff52 	bl	8001588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_SHLDR_3_GPIO_Port, CS_SHLDR_3_Pin, isBitSet(iterator, 0));
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	2102      	movs	r1, #2
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0x13c>)
 80006f4:	f000 ff48 	bl	8001588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_SHLDR_4_GPIO_Port, CS_SHLDR_4_Pin, isBitSet(iterator, 0));
 80006f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	2104      	movs	r1, #4
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0x13c>)
 8000708:	f000 ff3e 	bl	8001588 <HAL_GPIO_WritePin>

	  /**GPIO Tests**/
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, isBitSet(iterator, 0));
 800070c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x140>)
 800071c:	f000 ff34 	bl	8001588 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi1, data, 10, 10);
 8000720:	4639      	mov	r1, r7
 8000722:	230a      	movs	r3, #10
 8000724:	220a      	movs	r2, #10
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <main+0x144>)
 8000728:	f001 fc3e 	bl	8001fa8 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, data, 10, 10);
 800072c:	4639      	mov	r1, r7
 800072e:	230a      	movs	r3, #10
 8000730:	220a      	movs	r2, #10
 8000732:	4811      	ldr	r0, [pc, #68]	; (8000778 <main+0x148>)
 8000734:	f001 fc38 	bl	8001fa8 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, data, 10, 10);
 8000738:	4639      	mov	r1, r7
 800073a:	230a      	movs	r3, #10
 800073c:	220a      	movs	r2, #10
 800073e:	480f      	ldr	r0, [pc, #60]	; (800077c <main+0x14c>)
 8000740:	f001 fc32 	bl	8001fa8 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi4, data, 10, 10);
 8000744:	4639      	mov	r1, r7
 8000746:	230a      	movs	r3, #10
 8000748:	220a      	movs	r2, #10
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <main+0x150>)
 800074c:	f001 fc2c 	bl	8001fa8 <HAL_SPI_Transmit>

	  iterator++;
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3301      	adds	r3, #1
 8000756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_Delay(250);
 800075a:	20fa      	movs	r0, #250	; 0xfa
 800075c:	f000 fc7a 	bl	8001054 <HAL_Delay>
	  if(iterator == MAX_ITERATOR)
 8000760:	e793      	b.n	800068a <main+0x5a>
 8000762:	bf00      	nop
 8000764:	20000188 	.word	0x20000188
 8000768:	08002f28 	.word	0x08002f28
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40021000 	.word	0x40021000
 8000774:	20000130 	.word	0x20000130
 8000778:	20000028 	.word	0x20000028
 800077c:	20000080 	.word	0x20000080
 8000780:	200000d8 	.word	0x200000d8

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2234      	movs	r2, #52	; 0x34
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fbb4 	bl	8002f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xb8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <SystemClock_Config+0xb8>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <SystemClock_Config+0xb8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <SystemClock_Config+0xbc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemClock_Config+0xbc>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SystemClock_Config+0xbc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f917 	bl	8001a2c <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000804:	f000 f81e 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f000 feca 	bl	80015bc <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800082e:	f000 f809 	bl	8000844 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084a:	e7fe      	b.n	800084a <Error_Handler+0x6>

0800084c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000880:	2210      	movs	r2, #16
 8000882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI1_Init+0x64>)
 800089e:	f001 fb1f 	bl	8001ee0 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a8:	f7ff ffcc 	bl	8000844 <Error_Handler>
  }

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000130 	.word	0x20000130
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI2_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI2_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI2_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI2_Init+0x64>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI2_Init+0x64>)
 80008ec:	2210      	movs	r2, #16
 80008ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI2_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI2_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI2_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI2_Init+0x64>)
 800090a:	f001 fae9 	bl	8001ee0 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000914:	f7ff ff96 	bl	8000844 <Error_Handler>
  }

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000028 	.word	0x20000028
 8000920:	40003800 	.word	0x40003800

08000924 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_SPI3_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_SPI3_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_SPI3_Init+0x64>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_SPI3_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_SPI3_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_SPI3_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_SPI3_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_SPI3_Init+0x64>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SPI3_Init+0x64>)
 8000958:	2210      	movs	r2, #16
 800095a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_SPI3_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SPI3_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_SPI3_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_SPI3_Init+0x64>)
 8000970:	220a      	movs	r2, #10
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_SPI3_Init+0x64>)
 8000976:	f001 fab3 	bl	8001ee0 <HAL_SPI_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000980:	f7ff ff60 	bl	8000844 <Error_Handler>
  }

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000080 	.word	0x20000080
 800098c:	40003c00 	.word	0x40003c00

08000990 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI4_Init+0x64>)
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_SPI4_Init+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI4_Init+0x64>)
 800099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009c4:	2210      	movs	r2, #16
 80009c6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_SPI4_Init+0x64>)
 80009e2:	f001 fa7d 	bl	8001ee0 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80009ec:	f7ff ff2a 	bl	8000844 <Error_Handler>
  }

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000d8 	.word	0x200000d8
 80009f8:	40013400 	.word	0x40013400

080009fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	; 0x48
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a9a      	ldr	r2, [pc, #616]	; (8000c84 <HAL_SPI_MspInit+0x288>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d14a      	bne.n	8000ab4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
 8000a22:	4b99      	ldr	r3, [pc, #612]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a98      	ldr	r2, [pc, #608]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b96      	ldr	r3, [pc, #600]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
 8000a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a3e:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a91      	ldr	r2, [pc, #580]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b8f      	ldr	r3, [pc, #572]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5a:	4b8b      	ldr	r3, [pc, #556]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a8a      	ldr	r2, [pc, #552]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b88      	ldr	r3, [pc, #544]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a82:	2305      	movs	r3, #5
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	487f      	ldr	r0, [pc, #508]	; (8000c8c <HAL_SPI_MspInit+0x290>)
 8000a8e:	f000 fbe9 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a92:	2328      	movs	r3, #40	; 0x28
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4878      	ldr	r0, [pc, #480]	; (8000c90 <HAL_SPI_MspInit+0x294>)
 8000aae:	f000 fbd9 	bl	8001264 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000ab2:	e0e3      	b.n	8000c7c <HAL_SPI_MspInit+0x280>
  else if(spiHandle->Instance==SPI2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a76      	ldr	r2, [pc, #472]	; (8000c94 <HAL_SPI_MspInit+0x298>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d15b      	bne.n	8000b76 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	4b71      	ldr	r3, [pc, #452]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a70      	ldr	r2, [pc, #448]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b6e      	ldr	r3, [pc, #440]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	4b6a      	ldr	r3, [pc, #424]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a69      	ldr	r2, [pc, #420]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	4b63      	ldr	r3, [pc, #396]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a62      	ldr	r2, [pc, #392]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b60      	ldr	r3, [pc, #384]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b12:	2302      	movs	r3, #2
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	485a      	ldr	r0, [pc, #360]	; (8000c98 <HAL_SPI_MspInit+0x29c>)
 8000b2e:	f000 fb99 	bl	8001264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b32:	2304      	movs	r3, #4
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4852      	ldr	r0, [pc, #328]	; (8000c98 <HAL_SPI_MspInit+0x29c>)
 8000b4e:	f000 fb89 	bl	8001264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4848      	ldr	r0, [pc, #288]	; (8000c90 <HAL_SPI_MspInit+0x294>)
 8000b70:	f000 fb78 	bl	8001264 <HAL_GPIO_Init>
}
 8000b74:	e082      	b.n	8000c7c <HAL_SPI_MspInit+0x280>
  else if(spiHandle->Instance==SPI3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a48      	ldr	r2, [pc, #288]	; (8000c9c <HAL_SPI_MspInit+0x2a0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d14b      	bne.n	8000c18 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a3f      	ldr	r2, [pc, #252]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000be4:	2307      	movs	r3, #7
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bec:	4619      	mov	r1, r3
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <HAL_SPI_MspInit+0x294>)
 8000bf0:	f000 fb38 	bl	8001264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <HAL_SPI_MspInit+0x29c>)
 8000c12:	f000 fb27 	bl	8001264 <HAL_GPIO_Init>
}
 8000c16:	e031      	b.n	8000c7c <HAL_SPI_MspInit+0x280>
  else if(spiHandle->Instance==SPI4)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_SPI_MspInit+0x2a4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12c      	bne.n	8000c7c <HAL_SPI_MspInit+0x280>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x28c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000c5a:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_SPI_MspInit+0x2a8>)
 8000c78:	f000 faf4 	bl	8001264 <HAL_GPIO_Init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3748      	adds	r7, #72	; 0x48
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40003800 	.word	0x40003800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40003c00 	.word	0x40003c00
 8000ca0:	40013400 	.word	0x40013400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f966 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemInit+0x28>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <SystemInit+0x28>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SystemInit+0x28>)
 8000d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d66:	609a      	str	r2, [r3, #8]
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <MX_TIM3_Init+0xe8>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000db0:	2203      	movs	r2, #3
 8000db2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dbc:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000dc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dce:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dd0:	f001 faca 	bl	8002368 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dda:	f7ff fd33 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de8:	4619      	mov	r1, r3
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dec:	f001 fc20 	bl	8002630 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000df6:	f7ff fd25 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000dfc:	f001 fadf 	bl	80023be <HAL_TIM_PWM_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e06:	f7ff fd1d 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4619      	mov	r1, r3
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000e1a:	f001 ffd1 	bl	8002dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e24:	f7ff fd0e 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	2360      	movs	r3, #96	; 0x60
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000e40:	f001 fb30 	bl	80024a4 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e4a:	f7ff fcfb 	bl	8000844 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM3_Init+0xe4>)
 8000e50:	f000 f82a 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000188 	.word	0x20000188
 8000e60:	40000400 	.word	0x40000400

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_TIM_MspPostInit+0x68>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11d      	bne.n	8000f06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000f02:	f000 f9af 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000400 	.word	0x40000400
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f22:	e003      	b.n	8000f2c <LoopCopyDataInit>

08000f24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f2a:	3104      	adds	r1, #4

08000f2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f34:	d3f6      	bcc.n	8000f24 <CopyDataInit>
  ldr  r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f38:	e002      	b.n	8000f40 <LoopFillZerobss>

08000f3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f3c:	f842 3b04 	str.w	r3, [r2], #4

08000f40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f44:	d3f9      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ff01 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f001 ffb5 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fb6f 	bl	8000630 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f58:	08002f70 	.word	0x08002f70
  ldr  r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f68:	200001cc 	.word	0x200001cc

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f92f 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fe80 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f939 	bl	800124a <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f000 f90f 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	200001c8 	.word	0x200001c8

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001c8 	.word	0x200001c8

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_Delay+0x40>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff47 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff5c 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffb0 	bl	80011b8 <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e165      	b.n	800154c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8154 	bne.w	8001546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d00b      	beq.n	80012be <HAL_GPIO_Init+0x5a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0xfc>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ae 	beq.w	8001546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_GPIO_Init+0x300>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_GPIO_Init+0x304>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x21a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_GPIO_Init+0x308>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x216>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_GPIO_Init+0x30c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x212>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4b      	ldr	r2, [pc, #300]	; (8001574 <HAL_GPIO_Init+0x310>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4a      	ldr	r2, [pc, #296]	; (8001578 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x20a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x206>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x202>
 8001462:	2306      	movs	r3, #6
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001466:	2307      	movs	r3, #7
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4934      	ldr	r1, [pc, #208]	; (8001564 <HAL_GPIO_Init+0x300>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c2:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ec:	4a25      	ldr	r2, [pc, #148]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_GPIO_Init+0x320>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_GPIO_Init+0x320>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_GPIO_Init+0x320>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae96 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	3724      	adds	r7, #36	; 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40021400 	.word	0x40021400
 8001580:	40021800 	.word	0x40021800
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0cc      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d90c      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d044      	beq.n	80016dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d003      	beq.n	800167a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	2b03      	cmp	r3, #3
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e067      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4934      	ldr	r1, [pc, #208]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff fcc6 	bl	800103c <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff fcc2 	bl	800103c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e04f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d20c      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4601      	mov	r1, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	fa21 f303 	lsr.w	r3, r1, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc26 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00
 8001778:	40023800 	.word	0x40023800
 800177c:	08002f50 	.word	0x08002f50
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	f200 8130 	bhi.w	8001a10 <HAL_RCC_GetSysClockFreq+0x288>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	08001a11 	.word	0x08001a11
 80017c0:	08001a11 	.word	0x08001a11
 80017c4:	08001a11 	.word	0x08001a11
 80017c8:	080017f3 	.word	0x080017f3
 80017cc:	08001a11 	.word	0x08001a11
 80017d0:	08001a11 	.word	0x08001a11
 80017d4:	08001a11 	.word	0x08001a11
 80017d8:	080017f9 	.word	0x080017f9
 80017dc:	08001a11 	.word	0x08001a11
 80017e0:	08001a11 	.word	0x08001a11
 80017e4:	08001a11 	.word	0x08001a11
 80017e8:	08001907 	.word	0x08001907
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x29c>)
 80017ee:	613b      	str	r3, [r7, #16]
       break;
 80017f0:	e111      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b8d      	ldr	r3, [pc, #564]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017f4:	613b      	str	r3, [r7, #16]
      break;
 80017f6:	e10e      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b87      	ldr	r3, [pc, #540]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d023      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	f240 11ff 	movw	r1, #511	; 0x1ff
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	ea03 0501 	and.w	r5, r3, r1
 8001824:	ea04 0602 	and.w	r6, r4, r2
 8001828:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800182a:	fb02 f106 	mul.w	r1, r2, r6
 800182e:	2200      	movs	r2, #0
 8001830:	fb02 f205 	mul.w	r2, r2, r5
 8001834:	440a      	add	r2, r1
 8001836:	497c      	ldr	r1, [pc, #496]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001838:	fba5 0101 	umull	r0, r1, r5, r1
 800183c:	1853      	adds	r3, r2, r1
 800183e:	4619      	mov	r1, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	461a      	mov	r2, r3
 8001848:	4623      	mov	r3, r4
 800184a:	f7fe fcdb 	bl	8000204 <__aeabi_uldivmod>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e049      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	ea03 0501 	and.w	r5, r3, r1
 800186c:	ea04 0602 	and.w	r6, r4, r2
 8001870:	4629      	mov	r1, r5
 8001872:	4632      	mov	r2, r6
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	0154      	lsls	r4, r2, #5
 800187e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001882:	014b      	lsls	r3, r1, #5
 8001884:	4619      	mov	r1, r3
 8001886:	4622      	mov	r2, r4
 8001888:	1b49      	subs	r1, r1, r5
 800188a:	eb62 0206 	sbc.w	r2, r2, r6
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	0194      	lsls	r4, r2, #6
 8001898:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800189c:	018b      	lsls	r3, r1, #6
 800189e:	1a5b      	subs	r3, r3, r1
 80018a0:	eb64 0402 	sbc.w	r4, r4, r2
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	00e2      	lsls	r2, r4, #3
 80018ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018b2:	00d9      	lsls	r1, r3, #3
 80018b4:	460b      	mov	r3, r1
 80018b6:	4614      	mov	r4, r2
 80018b8:	195b      	adds	r3, r3, r5
 80018ba:	eb44 0406 	adc.w	r4, r4, r6
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	02a2      	lsls	r2, r4, #10
 80018c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018cc:	0299      	lsls	r1, r3, #10
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	4621      	mov	r1, r4
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	f7fe fc90 	bl	8000204 <__aeabi_uldivmod>
 80018e4:	4603      	mov	r3, r0
 80018e6:	460c      	mov	r4, r1
 80018e8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ea:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	3301      	adds	r3, #1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	e087      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	f240 11ff 	movw	r1, #511	; 0x1ff
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	ea03 0501 	and.w	r5, r3, r1
 8001932:	ea04 0602 	and.w	r6, r4, r2
 8001936:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001938:	fb02 f106 	mul.w	r1, r2, r6
 800193c:	2200      	movs	r2, #0
 800193e:	fb02 f205 	mul.w	r2, r2, r5
 8001942:	440a      	add	r2, r1
 8001944:	4938      	ldr	r1, [pc, #224]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001946:	fba5 0101 	umull	r0, r1, r5, r1
 800194a:	1853      	adds	r3, r2, r1
 800194c:	4619      	mov	r1, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f04f 0400 	mov.w	r4, #0
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	f7fe fc54 	bl	8000204 <__aeabi_uldivmod>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e049      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	ea03 0501 	and.w	r5, r3, r1
 800197a:	ea04 0602 	and.w	r6, r4, r2
 800197e:	4629      	mov	r1, r5
 8001980:	4632      	mov	r2, r6
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	0154      	lsls	r4, r2, #5
 800198c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001990:	014b      	lsls	r3, r1, #5
 8001992:	4619      	mov	r1, r3
 8001994:	4622      	mov	r2, r4
 8001996:	1b49      	subs	r1, r1, r5
 8001998:	eb62 0206 	sbc.w	r2, r2, r6
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	0194      	lsls	r4, r2, #6
 80019a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019aa:	018b      	lsls	r3, r1, #6
 80019ac:	1a5b      	subs	r3, r3, r1
 80019ae:	eb64 0402 	sbc.w	r4, r4, r2
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	00e2      	lsls	r2, r4, #3
 80019bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019c0:	00d9      	lsls	r1, r3, #3
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	195b      	adds	r3, r3, r5
 80019c8:	eb44 0406 	adc.w	r4, r4, r6
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	02a2      	lsls	r2, r4, #10
 80019d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019da:	0299      	lsls	r1, r3, #10
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	4621      	mov	r1, r4
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	f7fe fc09 	bl	8000204 <__aeabi_uldivmod>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x298>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0f1b      	lsrs	r3, r3, #28
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	613b      	str	r3, [r7, #16]
      break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x29c>)
 8001a12:	613b      	str	r3, [r7, #16]
      break;
 8001a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a16:	693b      	ldr	r3, [r7, #16]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400
 8001a28:	017d7840 	.word	0x017d7840

08001a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8083 	beq.w	8001b4c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a46:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d019      	beq.n	8001a86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a52:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a5e:	4b8f      	ldr	r3, [pc, #572]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d112      	bne.n	8001a9e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a78:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d05b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x11e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d157      	bne.n	8001b4a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e216      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e01d      	b.n	8001af2 <HAL_RCC_OscConfig+0xc6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0xae>
 8001ac0:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0xc6>
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6f      	ldr	r2, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d013      	beq.n	8001b22 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa9f 	bl	800103c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b02:	f7ff fa9b 	bl	800103c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1db      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b14:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0xd6>
 8001b20:	e014      	b.n	8001b4c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa8b 	bl	800103c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fa87 	bl	800103c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1c7      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0xfe>
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d06f      	beq.n	8001c38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b64:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d11c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d116      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b94:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x180>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e18f      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4938      	ldr	r1, [pc, #224]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc0:	e03a      	b.n	8001c38 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bca:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fa34 	bl	800103c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa30 	bl	800103c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e170      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4925      	ldr	r1, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
 8001c0a:	e015      	b.n	8001c38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fa13 	bl	800103c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fa0f 	bl	800103c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e14f      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d037      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d016      	beq.n	8001c7a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x278>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff f9f3 	bl	800103c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f9ef 	bl	800103c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e12f      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x22e>
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_OscConfig+0x278>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f9dc 	bl	800103c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff f9d8 	bl	800103c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d908      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e118      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e9      	bne.n	8001c88 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a7e      	ldr	r2, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b79      	ldr	r3, [pc, #484]	; (8001ed8 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f997 	bl	800103c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff f993 	bl	800103c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e0d3      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31a>
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x354>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x33c>
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x354>
 8001d68:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a56      	ldr	r2, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f958 	bl	800103c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f954 	bl	800103c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e092      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x364>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f942 	bl	800103c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f93e 	bl	800103c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e07c      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d068      	beq.n	8001eca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d060      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d145      	bne.n	8001e98 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_RCC_OscConfig+0x4b0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f913 	bl	800103c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f90f 	bl	800103c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e04f      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	019b      	lsls	r3, r3, #6
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	071b      	lsls	r3, r3, #28
 8001e64:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCC_OscConfig+0x4b0>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f8e4 	bl	800103c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff f8e0 	bl	800103c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e020      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x44c>
 8001e96:	e018      	b.n	8001eca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x4b0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f8cd 	bl	800103c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff f8c9 	bl	800103c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e009      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x4a8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x47a>
 8001ec4:	e001      	b.n	8001eca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42470060 	.word	0x42470060

08001ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e056      	b.n	8001fa0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe fd75 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	ea42 0103 	orr.w	r1, r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f003 0104 	and.w	r1, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_Transmit+0x22>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e11e      	b.n	8002208 <HAL_SPI_Transmit+0x260>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fd2:	f7ff f833 	bl	800103c <HAL_GetTick>
 8001fd6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d002      	beq.n	8001fee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fec:	e103      	b.n	80021f6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_SPI_Transmit+0x52>
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ffe:	e0fa      	b.n	80021f6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2203      	movs	r2, #3
 8002004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002046:	d107      	bne.n	8002058 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d007      	beq.n	8002076 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800207e:	d14b      	bne.n	8002118 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_SPI_Transmit+0xe6>
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d13e      	bne.n	800210c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020b2:	e02b      	b.n	800210c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d112      	bne.n	80020e8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	1c9a      	adds	r2, r3, #2
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80020e6:	e011      	b.n	800210c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e8:	f7fe ffa8 	bl	800103c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d803      	bhi.n	8002100 <HAL_SPI_Transmit+0x158>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d102      	bne.n	8002106 <HAL_SPI_Transmit+0x15e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	77fb      	strb	r3, [r7, #31]
          goto error;
 800210a:	e074      	b.n	80021f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ce      	bne.n	80020b4 <HAL_SPI_Transmit+0x10c>
 8002116:	e04c      	b.n	80021b2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Transmit+0x17e>
 8002120:	8afb      	ldrh	r3, [r7, #22]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d140      	bne.n	80021a8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	330c      	adds	r3, #12
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800214c:	e02c      	b.n	80021a8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	d113      	bne.n	8002184 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	86da      	strh	r2, [r3, #54]	; 0x36
 8002182:	e011      	b.n	80021a8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002184:	f7fe ff5a 	bl	800103c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d803      	bhi.n	800219c <HAL_SPI_Transmit+0x1f4>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d102      	bne.n	80021a2 <HAL_SPI_Transmit+0x1fa>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021a6:	e026      	b.n	80021f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1cd      	bne.n	800214e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f894 	bl	80022e4 <SPI_EndRxTxTransaction>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	77fb      	strb	r3, [r7, #31]
 80021f2:	e000      	b.n	80021f6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80021f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002206:	7ffb      	ldrb	r3, [r7, #31]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002220:	e04c      	b.n	80022bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d048      	beq.n	80022bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800222a:	f7fe ff07 	bl	800103c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d902      	bls.n	8002240 <SPI_WaitFlagStateUntilTimeout+0x30>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d13d      	bne.n	80022bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800224e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002258:	d111      	bne.n	800227e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002262:	d004      	beq.n	800226e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d107      	bne.n	800227e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800227c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002286:	d10f      	bne.n	80022a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e00f      	b.n	80022dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d1a3      	bne.n	8002222 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <SPI_EndRxTxTransaction+0x7c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <SPI_EndRxTxTransaction+0x80>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800230e:	d112      	bne.n	8002336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ff78 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e00f      	b.n	8002356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3b01      	subs	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234c:	2b80      	cmp	r3, #128	; 0x80
 800234e:	d0f2      	beq.n	8002336 <SPI_EndRxTxTransaction+0x52>
 8002350:	e000      	b.n	8002354 <SPI_EndRxTxTransaction+0x70>
        break;
 8002352:	bf00      	nop
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000
 8002364:	165e9f81 	.word	0x165e9f81

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e01d      	b.n	80023b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fd68 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 f9fa 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01d      	b.n	800240c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f815 	bl	8002414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 f9cf 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fc9a 	bl	8002d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_TIM_PWM_Start+0x74>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_TIM_PWM_Start+0x2c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_TIM_PWM_Start+0x78>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_TIM_PWM_Start+0x30>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_TIM_PWM_Start+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d007      	beq.n	8002490 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0b4      	b.n	8002628 <HAL_TIM_PWM_ConfigChannel+0x184>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	f200 809f 	bhi.w	8002614 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002511 	.word	0x08002511
 80024e0:	08002615 	.word	0x08002615
 80024e4:	08002615 	.word	0x08002615
 80024e8:	08002615 	.word	0x08002615
 80024ec:	08002551 	.word	0x08002551
 80024f0:	08002615 	.word	0x08002615
 80024f4:	08002615 	.word	0x08002615
 80024f8:	08002615 	.word	0x08002615
 80024fc:	08002593 	.word	0x08002593
 8002500:	08002615 	.word	0x08002615
 8002504:	08002615 	.word	0x08002615
 8002508:	08002615 	.word	0x08002615
 800250c:	080025d3 	.word	0x080025d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f9e2 	bl	80028e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
      break;
 800254e:	e062      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa32 	bl	80029c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6999      	ldr	r1, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	619a      	str	r2, [r3, #24]
      break;
 8002590:	e041      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa87 	bl	8002aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0208 	orr.w	r2, r2, #8
 80025ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0204 	bic.w	r2, r2, #4
 80025bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
      break;
 80025d0:	e021      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fadb 	bl	8002b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69d9      	ldr	r1, [r3, #28]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	61da      	str	r2, [r3, #28]
      break;
 8002612:	e000      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002614:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x18>
 8002644:	2302      	movs	r3, #2
 8002646:	e0a6      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x166>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800266e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d067      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x120>
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d80b      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x6c>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d073      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0x140>
 8002688:	2b10      	cmp	r3, #16
 800268a:	d802      	bhi.n	8002692 <HAL_TIM_ConfigClockSource+0x62>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d06f      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002690:	e078      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002692:	2b20      	cmp	r3, #32
 8002694:	d06c      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0x140>
 8002696:	2b30      	cmp	r3, #48	; 0x30
 8002698:	d06a      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800269a:	e073      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d00d      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x8c>
 80026a0:	2b70      	cmp	r3, #112	; 0x70
 80026a2:	d804      	bhi.n	80026ae <HAL_TIM_ConfigClockSource+0x7e>
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d033      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0xe0>
 80026a8:	2b60      	cmp	r3, #96	; 0x60
 80026aa:	d041      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026ac:	e06a      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d066      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0x152>
 80026b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b8:	d017      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026ba:	e063      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f000 fb32 	bl	8002d34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
      break;
 80026e8:	e04c      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f000 fb1b 	bl	8002d34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270c:	609a      	str	r2, [r3, #8]
      break;
 800270e:	e039      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f000 fa8f 	bl	8002c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2150      	movs	r1, #80	; 0x50
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fae8 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 800272e:	e029      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	461a      	mov	r2, r3
 800273e:	f000 faae 	bl	8002c9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2160      	movs	r1, #96	; 0x60
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fad8 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 800274e:	e019      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	461a      	mov	r2, r3
 800275e:	f000 fa6f 	bl	8002c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fac8 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 800276e:	e009      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fabf 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 8002780:	e000      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a40      	ldr	r2, [pc, #256]	; (80028b4 <TIM_Base_SetConfig+0x114>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <TIM_Base_SetConfig+0x40>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027be:	d00f      	beq.n	80027e0 <TIM_Base_SetConfig+0x40>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a3d      	ldr	r2, [pc, #244]	; (80028b8 <TIM_Base_SetConfig+0x118>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <TIM_Base_SetConfig+0x40>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <TIM_Base_SetConfig+0x11c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_Base_SetConfig+0x40>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <TIM_Base_SetConfig+0x120>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_Base_SetConfig+0x40>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <TIM_Base_SetConfig+0x124>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d108      	bne.n	80027f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <TIM_Base_SetConfig+0x114>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d02b      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d027      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <TIM_Base_SetConfig+0x118>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d023      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <TIM_Base_SetConfig+0x11c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01f      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <TIM_Base_SetConfig+0x120>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01b      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <TIM_Base_SetConfig+0x124>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d017      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <TIM_Base_SetConfig+0x128>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <TIM_Base_SetConfig+0x12c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00f      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <TIM_Base_SetConfig+0x130>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00b      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <TIM_Base_SetConfig+0x134>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <TIM_Base_SetConfig+0x138>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <TIM_Base_SetConfig+0x13c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d108      	bne.n	8002864 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <TIM_Base_SetConfig+0x114>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0xf8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0x124>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	615a      	str	r2, [r3, #20]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800
 80028c0:	40000c00 	.word	0x40000c00
 80028c4:	40010400 	.word	0x40010400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800
 80028d4:	40001800 	.word	0x40001800
 80028d8:	40001c00 	.word	0x40001c00
 80028dc:	40002000 	.word	0x40002000

080028e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f023 0302 	bic.w	r3, r3, #2
 8002928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <TIM_OC1_SetConfig+0xd8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_OC1_SetConfig+0x64>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <TIM_OC1_SetConfig+0xdc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10c      	bne.n	800295e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0308 	bic.w	r3, r3, #8
 800294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <TIM_OC1_SetConfig+0xd8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_OC1_SetConfig+0x8e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <TIM_OC1_SetConfig+0xdc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40010400 	.word	0x40010400

080029c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0320 	bic.w	r3, r3, #32
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <TIM_OC2_SetConfig+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_OC2_SetConfig+0x68>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <TIM_OC2_SetConfig+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d10d      	bne.n	8002a44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <TIM_OC2_SetConfig+0xe4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC2_SetConfig+0x94>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <TIM_OC2_SetConfig+0xe8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d113      	bne.n	8002a7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40010400 	.word	0x40010400

08002aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <TIM_OC3_SetConfig+0xe0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_OC3_SetConfig+0x66>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <TIM_OC3_SetConfig+0xe4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10d      	bne.n	8002b2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <TIM_OC3_SetConfig+0xe0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_OC3_SetConfig+0x92>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <TIM_OC3_SetConfig+0xe4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d113      	bne.n	8002b66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40010400 	.word	0x40010400

08002b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <TIM_OC4_SetConfig+0xa4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <TIM_OC4_SetConfig+0x68>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <TIM_OC4_SetConfig+0xa8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d109      	bne.n	8002c10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40010400 	.word	0x40010400

08002c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f023 0201 	bic.w	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 030a 	bic.w	r3, r3, #10
 8002c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b087      	sub	sp, #28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0210 	bic.w	r2, r3, #16
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	031b      	lsls	r3, r3, #12
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f043 0307 	orr.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	021a      	lsls	r2, r3, #8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2201      	movs	r2, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e05a      	b.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d01d      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10c      	bne.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40010400 	.word	0x40010400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40001800 	.word	0x40001800

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4e0d      	ldr	r6, [pc, #52]	; (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	; (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1ba4      	subs	r4, r4, r6
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	42a5      	cmp	r5, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4e0b      	ldr	r6, [pc, #44]	; (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	; (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f820 	bl	8002f10 <_init>
 8002ed0:	1ba4      	subs	r4, r4, r6
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	42a5      	cmp	r5, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ee0:	4798      	blx	r3
 8002ee2:	3501      	adds	r5, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eea:	4798      	blx	r3
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	08002f68 	.word	0x08002f68
 8002ef4:	08002f68 	.word	0x08002f68
 8002ef8:	08002f68 	.word	0x08002f68
 8002efc:	08002f6c 	.word	0x08002f6c

08002f00 <memset>:
 8002f00:	4402      	add	r2, r0
 8002f02:	4603      	mov	r3, r0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d100      	bne.n	8002f0a <memset+0xa>
 8002f08:	4770      	bx	lr
 8002f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f0e:	e7f9      	b.n	8002f04 <memset+0x4>

08002f10 <_init>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr

08002f1c <_fini>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr
